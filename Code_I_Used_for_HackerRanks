#To print numbers up to a certain point (n = end point) 
n = int(raw_input())
#n+1 used since that numnber isn't printed. * is used so this doesn't come out as a list. sep'' (no space) makes it so our code prints out 123 when n = 3 instead of 1 2 3.
print(*range(1, n+1), sep='')

#Not equal to 
!= 


#Code used to solve cuboid puzzle:

if __name__ == '__main__':
    x = int(raw_input())
    y = int(raw_input())
    z = int(raw_input())
    n = int(raw_input())
    
cuboid_sum = x+y+z

#i = (range(0,x+1))
#print(i)
#j = (range(0,y+1))
#print(j)
#k = (range(0,z+1))
#print(k)

#We begin by defining an empyty list called results ([] means an empty list). 
results = []
#Means all values less than or equal to x which is inputed by user above with x = int(...) 
for x in range(0,x+1): 
    for y in range(0,y+1): 
        for z in range(0,z+1): 
            cuboid_list = [x,y,z]
            #print(cuboid_list) 
            list_sum = x+y+z
            #print(list_sum) 
            if list_sum != n:
                results.append(cuboid_list)
                #firsst iteration of this function will be ([0,0,0] because for all values 0-x, 0 is first and this rule applies to y and z. So with our list of (0,0,0)
                #con. we add all of our elements together to get a sum of 0, which if it doesn't equal n (another input selected by the user), will be printed. 
                
print(results)



#To solve for second highest score: 
#Sample input = [2, 3, 6, 6, 5] (4 indexes total) 
if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    #arr.sort makes our arr list go from a disjumbled mess to a list of least to greatest
    arr.sort()
    #a = max(arr)
    #a = max value for the arr array
    print(arr[(arr.index(max(arr)))-1])
    #arr.index(max(arr))--> this will give the index of maximum value from the list, which is 3 (index 3 has value of 6 and so too does index 4)
    #We subtract 1 to get the index of the value before to get the 2nd highest value in the list. 
    
    
    

#A nested list is a list that contains another list (i.e.: a list of lists). It is also referred to as a multi-diminsional array. For example, a 2 dimensional array is used below:

#nested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']]
#print len(nested_list)
#prints 3
3print nested_list[1]
#prints ['red', 'black']
#print nested_list[1][0]
#prints red
#To go through every element in this list, use a nested for loop.

>>> nested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']]
>>> for inner in nested_list:
...     for value in inner:
...         print value
... 
blue
green
red
black
blue
white



for _ in ... = "we don't care about the iterator value, just that it should run some specific number of times".

#Sort = orders list with repeats (ex. [4,7,7,2,1,1] --> [1,1,2,4,7,7])
#Set = doesn't order list but removes repeats (ex. [4,7,7,2,1,1] --> [4,7,2,1])
#combine the two to get a sorted list without repeats (sorted(set(my_list))


#Nested Lists Prob. 
n=int(input()) #user inputs number of lists within our list
res=[]
grade=[]
for i in range(n): #starts at zero and goes to n (example, user will input name and mark for 5 students if n = 5 cuz i starts at 0 and goes to 4)
    name=input()
    mark=float(input())
    res.append([name,mark])
    grade.append(mark)   #calculation 2nd lowest
#print(res)   
#print(grade)
grade=sorted(set(grade))  #sorted unique
#print(grade)
m=grade[1] #remember that 1 will be the 2nd lowest value after the list is sorted
#print(m)
name=[]
for val in res: #for each name and mark (both are values) in res... (also val[0][1], 0 = name and 1 = mark)
    if m==val[1]: #if the 2nd lowest value == mark from res...
        name.append(val[0]) #append the value (name of student) to name list
#print(name)   #unsorted     
name.sort()
#print(name)   #sorted
for nm in name:
    print(nm)
    
    
#Code for finding the percentage 
if __name__ == '__main__':
    n = int(input())
    student_marks = {} #curly braces are used to define a data structure called a dictionary (a key/value mapping)
    for _ in range(n):
        name, *line = input().split() #maps can perform operation with multiple collections 
        scores = list(map(float, line)) #maps float function onto the list of string scores in line 
        student_marks[name] = scores
    query_name = input()
    marks = student_marks[query_name] #query_name = key to student marks (basically you type a name and it will provide you with the dictionary ({}))
#format(value,'.nf) replace n with number of decimals you want!
print(format(sum(marks)/3,'.2f'))

#Code for Mod Divmod
a = int(input())
b = int(input())


    
print(a//b)
print(a%b)
print(divmod(a,b))
    
#Code for Mod Power
a = int(input())
b = int(input())
m = int(input())

first_result = pow(a,b) 
second_result = pow(a,b,m)
print(first_result)
print(second_result)

#Code for Intergers Come In All Sizes 
a = int(input())
b = int(input()) 
c = int(input())
d = int(input()) 

pow1 = pow(a,b)
pow2 = pow(c,d)

pow_sum = pow1 + pow2 
print(pow_sum)

